Introduction

As Java developers, we often find ourselves bogged down by boilerplate code. Accessor methods, mutator methods, constructors, equals(), hashCode(), and toString() are essential but take up a lot of space and distract from the core logic of the application. The Spring Framework, widely used for building enterprise applications, is a fan of reducing boilerplate. However, even with Spring, a certain amount of it is unavoidable—unless we introduce Project Lombok into the equation.

Project Lombok provides annotations that can drastically minimize boilerplate code, improving readability and maintainability. Among these annotations, @FieldDefaults and @Data are commonly used, and this post will deep-dive into these two, demonstrating their usefulness in a Spring application.
Introduction to Lombok

Project Lombok is a library that has significantly impacted the Java ecosystem by reducing the repetitive and mundane code that developers often have to write. While Java is a powerful and versatile language, it’s often criticized for its verbosity, especially when compared to more modern languages like Kotlin or Python. Developers frequently have to write a lot of “ceremonial” code just to make simple things work, such as creating Plain Old Java Objects (POJOs) with their associated getters, setters, equals(), hashCode(), and toString() methods.
What Lombok Aims to Solve

Java’s verbosity isn’t just a matter of aesthetics; it can directly impact the productivity of a development team. Writing boilerplate code is time-consuming and increases the likelihood of errors. Imagine a class with numerous fields, each requiring its own getter and setter method. The situation quickly turns into a maintenance nightmare, particularly when you start adding methods like equals() and hashCode() which should be consistent with each other and updated every time the class fields change.

This is where Lombok comes into play. By providing a set of annotations, Lombok automatically generates code at compile-time, sidestepping the verbosity and potential for human error. The end result is a more readable and maintainable codebase, which is easier to understand, debug, and extend.
How Lombok Works

Lombok works by utilizing the annotation processing tool available in the Java Compiler. When your code is compiled, Lombok scans for its annotations. Upon finding them, it generates the corresponding code, which gets incorporated into your .class files. Essentially, the Java Compiler sees a version of your class that looks like you wrote all of the boilerplate code by hand, even though you didn't actually write it.

This method of operation has both benefits and drawbacks. On the upside, you don’t have to worry about the runtime overhead associated with reflection-based approaches. On the downside, the generated code is not visible in your source files, which can be confusing for those unfamiliar with Lombok.
Setting Up Lombok in Your Project

Integrating Lombok into a Spring project is a straightforward process. If you’re using Maven, you can add the following dependency to your pom.xml:

<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.22</version> <!-- Use the latest version -->
</dependency>

Or, if you’re using Gradle, include this in your build.gradle:

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22' // Use the latest version
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

You will also need to install the Lombok plugin in your IDE to ensure that it recognizes Lombok annotations and generates the appropriate code at compile-time.
Popular Lombok Annotations

Lombok offers a variety of annotations designed to serve different purposes. Here are some popular ones:

    @Getter and @Setter: Automatically generate getter and setter methods for fields.
    @ToString: Generates a human-readable toString() method.
    @EqualsAndHashCode: Generates both equals() and hashCode() methods based on the fields in your class.
    @AllArgsConstructor, @NoArgsConstructor, @RequiredArgsConstructor: Generate constructors with different configurations.

The focus of this post, however, will be on the @FieldDefaults and @Data annotations, which are highly beneficial in the context of Spring applications.